\chapter{Eredmények Kiértékelése}
\section{Megvalósítások}
Ezzel a dolgozattal négy év folyamatos munkájának egy szakaszát szeretném lezárni, a következő eredményeket sikerült felmutatni, kronológiai sorrendben: 

A mechanikai szerkezet fejlesztése a 2015-ben fejlesztett verzióhoz képest sokkal robusztusabb, kültérre alkalmasabb, mint az előző, és egyszerűbb is. Ugyan megmaradt az a tendencia, hogy csiga-áttételeket alkalmazzak a kerekek meghajtására. Az áttételeket magam terveztem és gyártattam le, a kezdeti alacsony költségvetés miatt. 
Sok alkatrész kivitelezésére használtam 3D nyomtatási technikát. Próbálkoztam inkrementális szenzor tárcsát készíteni, ami bevált, de nem lehetett alkalmazni robusztusan a rendszeren, mert a mechanikai rendszerben 2-3 mm kotyogás van, ami nem az jeleni, hogy nem is lehetséges, csak túl sok időt igényelt volna.

Az alkatrészeket 3D tervező programban elkészítettem, és 3D nyomtatóval megvalósítottuk, a tapasztalatom ezekkel az alkatrészekkel: nagy mechanikai terhelés elviselésére nem alkalmasak hosszútávon, ezért történt meg, hogy a csiga tengely csapágyháza terhelés alatt széttört.

A következő lépésben a robot alacsonyrendű vezérlőáramköröket terveztem meg és viteleztem ki CNC marógép segítségével.

A vezérlő logika implementálására FPGA alapú fejlesztőlapokat használtam, mert flexibilisek és testrészabható rendszert lehet elkészíteni segítségükkel.

Vivado környezetet használtam az FPGA fejlesztésére, megvalósítottam egy uBlaze processzorrendszer kialakítását és több hardveres modult is, amelyek a következők: PWM modul, UART protokoll csomag értelmező, amely támogatja a nagy sebességű kommunikációt és sikerült elérni  az 1ms mintavételezési periódust, globális engedélyező jel, ezeket a modulokat System Generator-ban valósítottam meg és IP mag készült ezekből.

Robotokhoz kapcsolódó keretrendszer használata lett szükséges, így került sor a ROS keretrendszer ismereteinek az elsajátítására.

Megterveztem az integrációt a ROS és FPGA UART alapú kommunikációjának kiépítésére a jelen pillanatban a robot specifikus, dinamikusan nem hasznosítható újra más FPGA alapú robotoknál anélkül, hogy ne kellene számottevő programkódot írni, de lehetséges automatizálni az integrációt, amennyiben ez szükséges.

A ROS használata számos előnyel járt, sikerült bekonfigurálni és elindítani a ROS keretrendszerben levő egyéb eszközöket is pl: loggolás a nodoek között, eclipse fejlesztőkörnyezet bekonfigurálása a fejlesztéshez, HectorMap térképezés és lokalizálás LIDAR alapján, robotmodell elkészítése Rviz 3D megjelenítő számára. Az alacsonyrendű paraméterek szinkronizációja a ROS rendszerben levő paraméterekkel.

Sikerült elkészíteni egy 90GB méretű virtuális gépet, amelyen minden eszköz megtalálható a robot fejlesztéséhez: Vivado,Matlab,Arduino,ROS lunar,eclipse.

Sikerült kiépíteni egy deploy mechanizmust, amely segítségével a forráskódot tudjuk telepíteni a robotra. Az SSH használatával a meglevő kódokat átmásoljuk a robotra, ahol majd újra fordítjuk a szükséges részeket.

Sikeresen elsajátítottam a ROS alapjait, és megterveztem egy sajátos kommunikációt FPGA alapú rendszer és a ROS között. Az integráció a robot és a ROS között jól működik, minden egyes szenzor mért adata bekerül a ROS környezetbe.

A rendszer elindítása után megbecsültem MATLAB segítségével a kerekek átviteli függvényeit, és majd ezekre PID szabályozót terveztem PID tuning toolbox segítségével.

A HectorMap segítségével, az ismeretlen terep térképezésével, a roboton lokalizálva, sikeresen bekonfiguráltam a movebase nevű eszközt, amely segítségével a robotot egy adott pozícióba és irányba tudjuk elvinni. A movebase megoldja az akadályok kikerülését is.

A térképezéssel kapcsolatban a tapasztalatok a mérések során, a LIDAR és HectorMap zajosak külső terepen egyrészt a környezeti tényezők miatt amelyek befolyásolják a robot dőlésszögét, így zajosítva a méréseket, valamint a lokalizáció nem pontos, ha üvegen keresztül halad a lézersugár.

A robottal végzett mérések során a robot szerkezete és alacsonyrendű szabályzása megbízhatónak bizonyult, képes több, legalább 100kg függőleges irányú terhelést elviselni és akár egy személygépkocsit is elmozdítani.

A mérések alapján a lépcsőre könnyebben tud felmenni, ha egy 90 \degree nál kisebb szög alatt közelítjük meg.

A környezetre fordulás esetén gyakorolja a robot a legnagyobb behatást, pl. helyben forgás esetén a súrlódások miatt a füves talajt a fekete földig leszedi. Mezőgazdasági alkalmazásra előnyösebb volna, ha mind a négy kerekét kormányozhatnánk.

A lépcsőt és a lejtőt is előnyösebb a SSMR al úgy megközelíteni, hogy a súlypont a robot elején legyen, ahogy felfele haladunk, így a merőleges nyomóerők is egyenletesebben eloszlanak. Lépcső esetében ügyelni kell a hátsó kerekek lépcsőfokba való beragadása miatt,m ert a kerekek nagy forgatónyomatéka, a robot hátra billentheti, ez abban az esetben állhat fent, ha a lépcsőt 90\degree szög alatt közelítjük meg.


\section{Hasonló rendszerekkel való összehasonlítás}

Az általam kivitelezett robot legjobban a Husky robotra hasonlít, amely szintén négy kerékkel rendelkezik. A legnagyobb előnye a sebessége, mivel nem használ, de kisebb a kerekei forgatónyomatéka. Hátránya ha hátrabukik akkor a kerekei nem fognak érintkeznek a talajjal, míg a SapRoover mindkét irányban képes működni.

\begin{table}[]
\begin{center}
\begin{tabular}{llll}
\hline Tulajdonság & Husky Robot & Előny & SapRoover \\ \hline
 széleség           &    0.67m    &    ?        &   0.78m        \\
   hosszuság        &    0.99m    &   ?        &   0.80m       \\
  magaság           &    0.39m    &   ?        &   0.40m        \\
 ROS 
 kompatibilitás           &    Igen         &   =    &   Igen        \\
   Max sebesség        &    1m/s  &     >   & 0.25 m/s    \\
   Bépitett számitogép        &    IGEN  &   =    & IGEN      \\
   Önsúly + hasznos teher & 50+75 kg &  <   & 60+100 kg \\
   Hátraborulhat & NEM &  <   & IGEN \\
\end{tabular}
\end{center}
\end{table}


\section{További fejlesztési irányok}

A robotplatformot a következő lépésekben felkelne szerelni egy nagyobb méréstartományú 3D LIDAR, sztereó kamera, és nagyobb pontóságú GPS vevővel.
A platform  anonimitása lenne a fő cél a növénytermesztésben, legyen képes eljutni A pontból B pontba autonóm módon anélkül hogy kárt tenne a haszonnövényekben. Eközben legyen képes kiszolgálni a majdan rászerelhető pl: robotkar kéréseit.

A mechanika tovább fejlesztése: célszerű lenne a robot mind a négy kerekét kormányozóvá tenni egyedileg, így a csuszás kormányzással járó károk megszőnének és energia fogyasztása is hatékonyabb lenne.

Az FPGA és a ROS integrációját flexibilisébe lehetne tenni azáltal hogy egy XML alapú konfigurációs fájlban leírva a kívánt üzenet típusokat egy értelmező segítségével kigenerálni a szükséges c++(.cpp és .h) állományokat, ROS és uBlaze oldalra. A UART kommunikációért felelő IP magot csak konfigurálni kellene szoftverből.


Napemseles energiaforrással ellátni, és töltőállomást elkészíteni amelyre automatikusan kapcsolódhatna a robot. Az akkumulátorok kezelésére egy energia processzor lenne szükséges.